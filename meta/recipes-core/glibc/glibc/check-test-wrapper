#!/usr/bin/env python3
import sys
import os
import subprocess

env = os.environ.copy()
args = sys.argv[1:]
targettype = args.pop(0)

workdir = os.path.abspath(os.path.dirname(__file__))
sysroot = os.path.join(workdir, "recipe-sysroot")
sysroot_native = os.path.join(workdir, "recipe-sysroot-native")

qemu_options = "".split()
ssh_options = "", "" ,""

# let cwd match that of the caller, otherwise default to /
cwd = os.path.abspath(os.getcwd())
if not (cwd == workdir or cwd.startswith(workdir + "/")):
    cwd = "/"

def expandpath(path):
    if os.path.isabs(path):
        return path
    if os.path.exists(os.path.abspath(path)):
        return os.path.abspath(path)
    # search PATH
    bpath = os.path.basename(path)
    nativepaths = [
            os.path.join(sysroot_native, "usr", "bin"),
            os.path.join(sysroot_native, "bin"),
            ]
    for i in nativepaths + os.environ.get("PATH", "").split(":"):
        if os.path.exists(os.path.join(i, bpath)):
            return os.path.join(i, bpath)
    return path

if targettype == "user":
    # ensure qemu args has a valid absolute path
    qemu_options[0] = expandpath(qemu_options[0])
    if not sysroot:
        sys.exit(-1)
    libpaths = [sysroot + "/usr/lib", sysroot + "/lib"]

    if args[0] == "env":
        args.pop(0)
        if len(args) == 0:
            args = ["env"]
        else:
            # process options
            while args[0].startswith("-"):
                opt = args.pop(0).lstrip("-")
                if "i" in opt:
                    env.clear()
            # process environment vars
            while "=" in args[0]:
                key, val = args.pop(0).split("=", 1)
                if key == "LD_LIBRARY_PATH":
                    libpaths += val.split(":")
                else:
                    env[key] = val
    if args[0] == "cp":
        # ignore copies, the filesystem is the same
        sys.exit(0)

    qemu_options += ["-L", sysroot]
    qemu_options += ["-E", "LD_LIBRARY_PATH={}".format(":".join(libpaths))]
    command = qemu_options + args
elif targettype == "proot":
    qemubinary = expandpath(qemu_options[0])
    if not os.path.exists(os.path.join(sysroot, "bin")):
        os.makedirs(os.path.join(sysroot, "bin"))
    command = [expandpath("proot"),
            "-S", sysroot,
            "-q", qemubinary,
            "-b", workdir, # bind WORKDIR
            "-b", "/bin/bash:/bin/sh",
            "-b", "/bin/ls:/bin/ls",
            "-b", "/bin/echo:/bin/echo",
            "-b", "/bin/cp:/bin/cp",
            "-b", "/bin/chmod:/bin/chmod",
            "-b", "/usr/bin/env:/usr/bin/env",
            "-w", cwd,
            ]
    command += args
elif targettype == "ssh":
    host, user, port = ssh_options
    command = ["ssh", "-o", "UserKnownHostsFile=/dev/null", "-o", "StrictHostKeyChecking=no"]
    if port:
        command += ["-p", str(port)]
    if not host:
        sys.exit(-1)
    command += ["{}@{}".format(user, host) if user else host]

    # wrap and replace quotes for correct transformation on ssh
    wrapped = " ".join(["'{0}'".format(i.replace("'", r"'\''")) for i in ["cd", cwd]]) + "; "
    wrapped += " ".join(["'{0}'".format(i.replace("'", r"'\''")) for i in args])
    command += ["sh", "-c", "\"{}\"".format(wrapped)]
else:
    sys.exit(-1)

try:
    r = subprocess.run(command, timeout = 1800, env = env)
    sys.exit(r.returncode)
except subprocess.TimeoutExpired:
    sys.exit(-1)

